{"version":3,"sources":["../source/ReactTimeAgo.js"],"names":["ReactTimeAgo","date","future","timeStyle","round","minTimeLeft","tooltip","Component","component","container","wrapperComponent","wrapperProps","locale","locales","formatVerboseDate","verboseDateFormat","updateInterval","tick","nowProperty","now","timeOffset","polyfill","rest","preferredLocales","concat","getDefaultLocale","timeAgo","formatDate","Date","stopUpdates","getTime","undefined","maxNow","format","getTimeToNextUpdate","formattedDate","timeToNextUpdate","INFINITY","formatDateRef","current","_formattedDate","_nextUpdateTime","setFormattedDate","updater","add","getNextValue","setValue","nextUpdateTime","stop","forceUpdate","verboseDateFormatter","verboseDate","result","WrapperComponent","propTypes","oneOfType","instanceOf","number","isRequired","string","arrayOf","bool","elementType","func","object","shape","threshold","interval","defaultProps","weekday","day","month","year","hour","minute","second","memo","YEAR"],"mappings":"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","file":"ReactTimeAgo.js","sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport TimeAgo from 'javascript-time-ago'\r\n\r\nimport getVerboseDateFormatter from './helpers/getVerboseDateFormatter'\r\nimport { getDate } from './helpers/date'\r\nimport getTimeAgo from './helpers/getTimeAgo'\r\n\r\nimport Updater from './Updater'\r\nimport Time from './Time'\r\n\r\nimport { style as styleType } from './PropTypes'\r\n\r\nfunction ReactTimeAgo({\r\n\tdate,\r\n\tfuture,\r\n\ttimeStyle,\r\n\tround,\r\n\tminTimeLeft,\r\n\ttooltip,\r\n\tcomponent: Component,\r\n\t// `container` property name is deprecated, \r\n\t// use `wrapperComponent` property name instead.\r\n\tcontainer,\r\n\twrapperComponent,\r\n\twrapperProps,\r\n\tlocale,\r\n\tlocales,\r\n\tformatVerboseDate,\r\n\tverboseDateFormat,\r\n\tupdateInterval,\r\n\ttick,\r\n\tnow: nowProperty,\r\n\ttimeOffset,\r\n\tpolyfill,\r\n\t...rest\r\n}) {\r\n\t// Get the list of preferred locales.\r\n\tconst preferredLocales = useMemo(() => {\r\n\t\t// Convert `locale` to `locales`.\r\n\t\tif (locale) {\r\n\t\t\tlocales = [locale]\r\n\t\t}\r\n\t\t// Add `javascript-time-ago` default locale.\r\n\t\treturn locales.concat(TimeAgo.getDefaultLocale())\r\n\t}, [\r\n\t\tlocale,\r\n\t\tlocales\r\n\t])\r\n\r\n\t// Create `javascript-time-ago` formatter instance.\r\n\tconst timeAgo = useMemo(() => {\r\n\t\treturn getTimeAgo(preferredLocales, { polyfill })\r\n\t}, [\r\n\t\tpreferredLocales,\r\n\t\tpolyfill\r\n\t])\r\n\r\n\t// The date or timestamp that was passed.\r\n\t// Convert timestamp to `Date`.\r\n\tdate = useMemo(() => getDate(date), [date])\r\n\r\n\t// Formats the `date`.\r\n\tconst formatDate = useCallback(() => {\r\n\t\tlet now = (nowProperty || Date.now()) - timeOffset\r\n\t\tlet stopUpdates\r\n\t\tif (future) {\r\n\t\t\tif (now >= date.getTime()) {\r\n\t\t\t\tnow = date.getTime()\r\n\t\t\t\tstopUpdates = true\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (minTimeLeft !== undefined) {\r\n\t\t\tconst maxNow = date.getTime() - minTimeLeft * 1000\r\n\t\t\tif (now > maxNow) {\r\n\t\t\t\tnow = maxNow\r\n\t\t\t\tstopUpdates = true\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet [formattedDate, timeToNextUpdate] = timeAgo.format(date, timeStyle, {\r\n\t\t\tgetTimeToNextUpdate: true,\r\n\t\t\tnow,\r\n\t\t\tfuture,\r\n\t\t\tround\r\n\t\t})\r\n\t\tif (stopUpdates) {\r\n\t\t\ttimeToNextUpdate = INFINITY\r\n\t\t} else {\r\n\t\t\t// Legacy compatibility: there used to be an `updateInterval` property.\r\n\t\t\t// That was before `getTimeToNextUpdate` feature was introduced in `javascript-time-ago`.\r\n\t\t\t// A default interval of one minute is introduced because\r\n\t\t\t// `getTimeToNextUpdate` feature may theoretically return `undefined`.\r\n\t\t\ttimeToNextUpdate = updateInterval || timeToNextUpdate || 60 * 1000 // A minute by default.\r\n\t\t}\r\n\t\treturn [formattedDate, now + timeToNextUpdate]\r\n\t}, [\r\n\t\tdate,\r\n\t\tfuture,\r\n\t\ttimeStyle,\r\n\t\tupdateInterval,\r\n\t\tround,\r\n\t\tminTimeLeft,\r\n\t\ttimeAgo,\r\n\t\tnowProperty\r\n\t])\r\n\r\n\tconst formatDateRef = useRef()\r\n\tformatDateRef.current = formatDate\r\n\r\n\tconst [_formattedDate, _nextUpdateTime] = useMemo(formatDate, [])\r\n\tconst [formattedDate, setFormattedDate] = useState(_formattedDate)\r\n\r\n\tconst updater = useRef()\r\n\r\n\tuseEffect(() => {\r\n\t\tif (tick) {\r\n\t\t\tupdater.current = Updater.add({\r\n\t\t\t\tgetNextValue: () => formatDateRef.current(),\r\n\t\t\t\tsetValue: setFormattedDate,\r\n\t\t\t\tnextUpdateTime: _nextUpdateTime\r\n\t\t\t})\r\n\t\t\treturn () => updater.current.stop()\r\n\t\t}\r\n\t}, [tick])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (updater.current) {\r\n\t\t\tupdater.current.forceUpdate()\r\n\t\t} else {\r\n\t\t\tconst [formattedDate] = formatDate()\r\n\t\t\tsetFormattedDate(formattedDate)\r\n\t\t}\r\n\t}, [formatDate])\r\n\r\n\t// Create verbose date formatter for the tooltip text.\r\n\tconst verboseDateFormatter = useMemo(() => {\r\n\t\treturn getVerboseDateFormatter(\r\n\t\t\tpreferredLocales, \r\n\t\t\tverboseDateFormat\r\n\t\t)\r\n\t}, [\r\n\t\tpreferredLocales,\r\n\t\tverboseDateFormat\r\n\t])\r\n\r\n\t// Format verbose date for the tooltip.\r\n\tconst verboseDate = useMemo(() => {\r\n\t\tif (formatVerboseDate) {\r\n\t\t\treturn formatVerboseDate(date)\r\n\t\t}\r\n\t\treturn verboseDateFormatter(date)\r\n\t}, [\r\n\t\tdate,\r\n\t\tformatVerboseDate,\r\n\t\tverboseDateFormatter\r\n\t])\r\n\r\n\tconst result = (\r\n\t\t<Component\r\n\t\t\tdate={date}\r\n\t\t\tverboseDate={verboseDate}\r\n\t\t\ttooltip={tooltip}\r\n\t\t\t{...rest}>\r\n\t\t\t{formattedDate}\r\n\t\t</Component>\r\n\t)\r\n\r\n\tconst WrapperComponent = wrapperComponent || container\r\n\r\n\tif (WrapperComponent) {\r\n\t\treturn (\r\n\t\t\t<WrapperComponent\r\n\t\t\t\t{...wrapperProps}\r\n\t\t\t\tverboseDate={verboseDate}>\r\n\t\t\t\t{result}\r\n\t\t\t</WrapperComponent>\r\n\t\t)\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\nReactTimeAgo.propTypes = {\r\n\t// The `date` or `timestamp`.\r\n\t// E.g. `new Date()` or `1355972400000`.\r\n\tdate: PropTypes.oneOfType([\r\n\t\tPropTypes.instanceOf(Date),\r\n\t\tPropTypes.number\r\n\t]).isRequired,\r\n\r\n\t// Preferred locale.\r\n\t// Is 'en' by default.\r\n\t// E.g. 'ru-RU'.\r\n\tlocale: PropTypes.string,\r\n\r\n\t// Alternatively to `locale`, one could pass `locales`:\r\n\t// A list of preferred locales (ordered).\r\n\t// Will choose the first supported locale from the list.\r\n\t// E.g. `['ru-RU', 'en-GB']`.\r\n\tlocales: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t// If set to `true`, then will stop at \"zero point\"\r\n\t// when going from future dates to past dates.\r\n\t// In other words, even if the `date` has passed,\r\n\t// it will still render as if `date` is `now`.\r\n\tfuture: PropTypes.bool,\r\n\r\n\t// Date/time formatting style.\r\n\t// See `javascript-time-ago` docs on \"Styles\" for more info.\r\n\t// E.g. 'round', 'round-minute', 'twitter', 'twitter-first-minute'.\r\n\ttimeStyle: styleType,\r\n\r\n\t// `round` parameter of `javascript-time-ago`.\r\n\t// See `javascript-time-ago` docs on \"Rounding\" for more info.\r\n\t// Examples: \"round\", \"floor\".\r\n\tround: PropTypes.string,\r\n\r\n\t// If specified, the time won't \"tick\" past this threshold (in seconds).\r\n\t// For example, if `minTimeLeft` is `60 * 60`\r\n\t// then the time won't \"tick\" past \"in 1 hour\".\r\n\tminTimeLeft: PropTypes.number,\r\n\r\n\t// A React component to render the relative time label.\r\n\t// Receives properties:\r\n\t// * date: Date — The date.\r\n\t// * verboseDate: string — Formatted verbose date.\r\n\t// * tooltip: boolean — The `tooltip` property of `<ReactTimeAgo/>` component.\r\n\t// * children: string — The relative time label.\r\n\t// * All \"unknown\" properties that have been passed to `<ReactTimeAgo/>` are passed through to this component.\r\n\tcomponent: PropTypes.elementType.isRequired,\r\n\r\n\t// Whether to use HTML `tooltip` attribute to show a verbose date tooltip.\r\n\t// Is `true` by default.\r\n\t// Can be set to `false` to disable the native HTML `tooltip`.\r\n\ttooltip: PropTypes.bool.isRequired,\r\n\r\n\t// Verbose date formatter.\r\n\t// By default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`.\r\n\tformatVerboseDate: PropTypes.func,\r\n\r\n\t// `Intl.DateTimeFormat` format for formatting verbose date.\r\n\t// See `Intl.DateTimeFormat` docs for more info.\r\n\tverboseDateFormat: PropTypes.object,\r\n\r\n\t// (deprecated)\r\n\t// How often the component refreshes itself.\r\n\t// Instead, consider using `getNextTimeToUpdate()` feature\r\n\t// of `javascript-time-ago` styles.\r\n\tupdateInterval: PropTypes.oneOfType([\r\n\t\tPropTypes.number,\r\n\t\tPropTypes.arrayOf(PropTypes.shape({\r\n\t\t\tthreshold: PropTypes.number,\r\n\t\t\tinterval: PropTypes.number.isRequired\r\n\t\t}))\r\n\t]),\r\n\r\n\t// (deprecated).\r\n\t// Set to `false` to disable automatic refresh of the component.\r\n\t// Is `true` by default.\r\n\t// I guess no one actually turns that off.\r\n\ttick: PropTypes.bool,\r\n\r\n\t// Allows setting a custom baseline for relative time measurement.\r\n\t// https://gitlab.com/catamphetamine/react-time-ago/-/issues/4\r\n\tnow: PropTypes.number,\r\n\r\n\t// Allows offsetting the `date` by an arbitrary amount of milliseconds.\r\n\t// https://gitlab.com/catamphetamine/react-time-ago/-/issues/4\r\n\ttimeOffset: PropTypes.number,\r\n\r\n\t// Pass `false` to use native `Intl.RelativeTimeFormat` / `Intl.PluralRules`\r\n\t// instead of the polyfilled ones in `javascript-time-ago`.\r\n\tpolyfill: PropTypes.bool,\r\n\r\n\t// (advanced)\r\n\t// A React Component to wrap the resulting `<time/>` React Element.\r\n\t// Receives `verboseDate` and `children` properties.\r\n\t// Also receives `wrapperProps`, if they're passed.\r\n\t// `verboseDate` can be used for displaying verbose date label\r\n\t// in an \"on mouse over\" (or \"on touch\") tooltip.\r\n\t// See the \"Tooltip\" readme section for more info.\r\n\t// Another example could be having `wrapperComponent`\r\n\t// being rerendered every time the component refreshes itself.\r\n\twrapperComponent: PropTypes.elementType,\r\n\r\n\t// Custom `props` passed to `wrapperComponent`.\r\n\twrapperProps: PropTypes.object\r\n}\r\n\r\nReactTimeAgo.defaultProps = {\r\n\t// No preferred locales.\r\n\tlocales: [],\r\n\r\n\t// Use a `<time/>` tag by default.\r\n\tcomponent: Time,\r\n\r\n\t// Use HTML `tooltip` attribute to show a verbose date tooltip.\r\n\ttooltip: true,\r\n\r\n\t// `Intl.DateTimeFormat` for verbose date.\r\n\t// Example: \"Thursday, December 20, 2012, 7:00:00 AM GMT+4\"\r\n\tverboseDateFormat: {\r\n\t\tweekday: 'long',\r\n\t\tday: 'numeric',\r\n\t\tmonth: 'long',\r\n\t\tyear: 'numeric',\r\n\t\thour: 'numeric',\r\n\t\tminute: '2-digit',\r\n\t\tsecond: '2-digit',\r\n\t\t// timeZoneName: 'short'\r\n\t},\r\n\r\n\t// Automatically refreshes itself.\r\n\ttick: true,\r\n\r\n\t// No time offset.\r\n\ttimeOffset: 0\r\n}\r\n\r\n// The component schedules a next refresh every time it renders.\r\n// There's no need to rerender this component unless its props change.\r\nReactTimeAgo = React.memo(ReactTimeAgo)\r\n\r\nexport default ReactTimeAgo\r\n\r\n// A thousand years is practically a metaphor for \"infinity\"\r\n// in the context of this component.\r\nconst YEAR = 365 * 24 * 60 * 60 * 1000\r\nconst INFINITY = 1000 * YEAR"]}