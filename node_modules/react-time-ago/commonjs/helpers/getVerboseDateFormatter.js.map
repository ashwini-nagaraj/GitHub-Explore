{"version":3,"sources":["../../source/helpers/getVerboseDateFormatter.js"],"names":["cache","INTL_DATE_TIME_FORMAT_SUPPORTED","FALLBACK_VERBOSE_DATE_FORMATTER","date","toString","getVerboseDateFormatter","locales","format","locale","resolveLocale","formatFingerprint","JSON","stringify","formatter","get","String","put","Intl","DateTimeFormat","resolvedLocales","localesFingerprint"],"mappings":";;;;;;AAAA;;;;AAEA;;AAKA;;;;;;AAEA,IAAMA,QAAQ,qBAAd;;AAEA,IAAMC,kCAAkC,0CAAxC;AACA,IAAMC,kCAAkC,SAAlCA,+BAAkC;AAAA,QAAQC,KAAKC,QAAL,EAAR;AAAA,CAAxC;;AAEA;;;;;;;;;;;;;;;AAeA,SAASC,uBAAT,CAAiCC,OAAjC,EAA0CC,MAA1C,EAAkD;AACjD;AACA;AACA,KAAI,CAACN,+BAAL,EAAsC;AACrC,SAAOC,+BAAP;AACA;;AAED;AACA;AACA,KAAMM,SAASC,cAAcH,OAAd,CAAf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAMI,oBAAoBC,KAAKC,SAAL,CAAeL,MAAf,CAA1B;;AAEA;AACA;AACA,KAAMM,YAAYb,MAAMc,GAAN,CAAUC,OAAOP,MAAP,CAAV,EAA0BE,iBAA1B,KACjBV,MAAMgB,GAAN,CAAUD,OAAOP,MAAP,CAAV,EAA0BE,iBAA1B,EAA6C,IAAIO,KAAKC,cAAT,CAAwBV,MAAxB,EAAgCD,MAAhC,CAA7C,CADD;;AAGA;AACA,QAAO;AAAA,SAAQM,UAAUN,MAAV,CAAiBJ,IAAjB,CAAR;AAAA,EAAP;AACA;;AAED;AACA;AACA;AACA;AACA;AACA;kBACe,0BAAQE,uBAAR,C;;AAEf;AACA;AACA;AACA;;AACA,IAAMc,kBAAkB,EAAxB;;AAEA;;;;;AAKA,SAASV,aAAT,CAAuBH,OAAvB,EAAgC;AAC/B,KAAMc,qBAAqBd,QAAQF,QAAR,EAA3B;AACA,KAAIe,gBAAgBC,kBAAhB,CAAJ,EAAyC;AACxC,SAAOD,gBAAgBC,kBAAhB,CAAP;AACA;AACD,QAAOD,gBAAgBC,kBAAhB,IAAsC,+CAAkCd,OAAlC,CAA7C;AACA","file":"getVerboseDateFormatter.js","sourcesContent":["import memoize from 'memoize-one'\r\n\r\nimport {\r\n\tintlDateTimeFormatSupported,\r\n\tintlDateTimeFormatSupportedLocale\r\n} from './locale'\r\n\r\nimport Cache from './cache'\r\n\r\nconst cache = new Cache()\r\n\r\nconst INTL_DATE_TIME_FORMAT_SUPPORTED = intlDateTimeFormatSupported()\r\nconst FALLBACK_VERBOSE_DATE_FORMATTER = date => date.toString()\r\n\r\n/**\r\n * Returns a verbose date formatter.\r\n * \r\n * @param {string} locale - Date formatting locale\r\n * @param {object} format - Output format\r\n * @param {string} format.day     - Day format\r\n * @param {string} format.month   - Month format\r\n * @param {string} format.year    - Year format\r\n * @param {string} format.weekday - Weekday format\r\n * @param {string} format.hour    - Hour format\r\n * @param {string} format.minute  - Minute format\r\n * @param {string} format.second  - Second format\r\n *\r\n * @returns {Function} `(date) -> string`.\r\n */\r\nfunction getVerboseDateFormatter(locales, format) {\r\n\t// Fall back to `date.toString()` for old web browsers.\r\n\t// https://caniuse.com/#search=intl\r\n\tif (!INTL_DATE_TIME_FORMAT_SUPPORTED) {\r\n\t\treturn FALLBACK_VERBOSE_DATE_FORMATTER\r\n\t}\r\n\r\n\t// If none of the `locales` are supported\r\n\t// a default system locale will be used.\r\n\tconst locale = resolveLocale(locales)\r\n\r\n\t// `Intl.DateTimeFormat` format caching key.\r\n\t// E.g. `\"{\"day\":\"numeric\",\"month\":\"short\",...}\"`.\r\n\t// Didn't benchmark what's faster:\r\n\t// creating a new `Intl.DateTimeFormat` instance\r\n\t// or stringifying a small JSON `format`.\r\n\t// Perhaps strigifying JSON `format` is faster.\r\n\tconst formatFingerprint = JSON.stringify(format)\r\n\r\n\t// Get `Intl.DateTimeFormat` instance for these `locale` and `format`.\r\n\t// (`locale` can be `undefined`, hence the `String(locale)` conversion)\r\n\tconst formatter = cache.get(String(locale), formatFingerprint) ||\r\n\t\tcache.put(String(locale), formatFingerprint, new Intl.DateTimeFormat(locale, format))\r\n\r\n\t// Return date formatter\r\n\treturn date => formatter.format(date)\r\n}\r\n\r\n// Even though `getVerboseDateFormatter()` function is called inside a\r\n// `useMemo()` hook, it's still invoked every time for different \r\n// `<ReactTimeAgo/>` elements on a page. There could be a lot of such\r\n// `<ReactTimeAgo/>` elements on a page. And `useMemo()` wouldn't speed up\r\n// the initial render. To work around that, simple argument-based memoization\r\n// is used.\r\nexport default memoize(getVerboseDateFormatter)\r\n\r\n// Caching locale resolving for optimizing pages \r\n// with a lot of `<ReactTimeAgo/>` elements (say, 100 or more).\r\n// `Intl.DateTimeFormat.supportedLocalesOf(locales)` is not instantaneous.\r\n// For example, it could be 25 milliseconds for 200 calls.\r\nconst resolvedLocales = {}\r\n\r\n/**\r\n * Resolves a list of possible locales to a single (\"best fit\") supported locale.\r\n * @param  {string[]} locales\r\n * @return {string}\r\n */\r\nfunction resolveLocale(locales) {\r\n\tconst localesFingerprint = locales.toString()\r\n\tif (resolvedLocales[localesFingerprint]) {\r\n\t\treturn resolvedLocales[localesFingerprint] \r\n\t}\r\n\treturn resolvedLocales[localesFingerprint] = intlDateTimeFormatSupportedLocale(locales)\r\n}"]}